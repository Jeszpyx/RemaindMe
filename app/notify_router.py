from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove
from assistant_service import assistant_service
from transcribe_service import transcribe_service
from file_service import file_service
from keyboards import (
    back_text,
    create_notify_text,
    list_notify_text,
    main_menu_kbd,
    notify_confirm_keyboard,
    notify_menu_kbd,
    remove_notify_text,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

notify_router = Router()


class Form(StatesGroup):
    notify_input = State()


@notify_router.message(Command("cancel"))
@notify_router.message(F.text.casefold() == "cancel")
async def cancel_handler(message: Message, state: FSMContext) -> None:
    """
    Allow user to cancel any action
    """
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=notify_menu_kbd,
    )


@notify_router.message(F.text == create_notify_text)
async def handle_create_notify_button(message: Message, state: FSMContext) -> None:
    await state.set_state(Form.notify_input)
    await message.answer(
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ.",
        reply_markup=ReplyKeyboardRemove(),
    )


@notify_router.message(Form.notify_input)
async def process_name(message: Message, state: FSMContext) -> None:
    if message.voice:
        file_id = message.voice.file_id
        file = await message.bot.get_file(file_id)
        file_name = f"{file_id}.ogg"
        file_path = file_service.get_path_to_save(file_name=file_name)
        await message.bot.download_file(file.file_path, file_path)
        text = await transcribe_service.transcribe(file_path)
        print(text, "text")
        result = await assistant_service.get_notification_data(user_prompt=text)
        print(result, "result")
        if not result:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—Ç—å —Ä–∞—Å–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        else:
            await message.answer(result, reply_markup=notify_confirm_keyboard)
            await state.clear()
    elif message.text:
        text = message.text
        result = await assistant_service.get_notification_data(user_prompt=text)
        if not result:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è")
        else:
            await message.answer(result, reply_markup=notify_confirm_keyboard)
            await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")


@notify_router.message(F.text == list_notify_text)
async def handle_list_notify_button(message: Message):
    await message.answer("–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")


@notify_router.message(F.text == remove_notify_text)
async def handle_remove_notify_button(message: Message):
    await message.answer("–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")


@notify_router.message(F.text == back_text)
async def handle_list_notify_button(message: Message):
    await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=main_menu_kbd)
